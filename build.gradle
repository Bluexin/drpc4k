group 'be.bluexin'
version "$version_number.$build_number"

buildscript {
    ext.kotlin_version = '1.2.0'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'maven'

sourceCompatibility = 1.8
//sourceCompatibility = 1.9

repositories {
    jcenter()
    mavenCentral()
}

configurations {
    shade
    compile.extendsFrom shade
    shadeInPlace
    compile.extendsFrom shadeInPlace
}

// TODO: https://github.com/kotlin/kotlinx.serialization
dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:0.19.3"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:0.19.3"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-nio:0.19.3"
//    shade "org.java-websocket:Java-WebSocket:1.3.6"
    shade "net.java.dev.jna:jna:4.5.0"
    shadeInPlace files("libs")
//    testCompile group: 'junit', name: 'junit', version: '4.12'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
kotlin {
    experimental {
        coroutines "enable"
    }
}

jar {
    for (dep in configurations.shade) {
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }
    for (dep in configurations.shadeInPlace) {
        from(dep)
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.2.1'
}

uploadArchives {
    if (System.getenv('REPO_PWD') != null) {
        repositories.mavenDeployer {
            repository(url: "http://maven.bluexin.be/repository/" + (((String) project.version).contains("SNAPSHOT") ? "snapshots" : "releases") + "/") {
                authentication(userName: "travis", password: System.getenv('REPO_PWD'))
            }
        }
    } /*else {
            repositories.mavenDeployer {
                repository(url: "file://" + (System.getenv("local_maven") != null ? System.getenv("local_maven") : project.buildDir.toString() + "/libs/mvn"))
            }
    }*/
}
