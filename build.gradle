plugins {
    id "java"
    id "maven"
    id "org.jetbrains.kotlin.jvm" version "1.2.61"
}

group 'be.bluexin'
version "$version_number.$build_number"

sourceCompatibility = 1.8

ext.discord_rpc_version = "3.3.0"

repositories {
    jcenter()
}

configurations {
    shade
    compile.extendsFrom shade
    shadeInPlace
    compile.extendsFrom shadeInPlace
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:0.19.3"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:0.19.3"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-nio:0.19.3"
    
    compile "org.slf4j:slf4j-api:1.7.25"
    compile "io.github.microutils:kotlin-logging:1.6.10"
    runtimeOnly "org.slf4j:slf4j-simple:1.7.25"
    
    shade "net.java.dev.jna:jna:4.5.0"
    shadeInPlace files("libs")
    shadeInPlace files("libsExt") {
        builtBy 'expandDiscordRPC'
    }
}

compileKotlin.kotlinOptions.jvmTarget = "1.8"
compileTestKotlin.kotlinOptions.jvmTarget = "1.8"
kotlin.experimental.coroutines "enable"

task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    from sourceSets.test.allSource
    classifier = 'sources'
}

artifacts {
    archives sourceJar
}

jar {
    for (dep in configurations.shade) {
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }
    for (dep in configurations.shadeInPlace) {
        from(dep)
    }
}

uploadArchives {
    if (System.getenv('REPO_PWD') != null) {
        repositories.mavenDeployer {
            repository(url: "http://maven.bluexin.be/repository/" + (((String) project.version).contains("SNAPSHOT") ? "snapshots" : "releases") + "/") {
                authentication(userName: "travis", password: System.getenv('REPO_PWD'))
            }
        }
    }
}

def downloadOne(String url, String filename) {
    file("tmp").mkdir()
    def connection = new URL(url).openConnection()
    connection.inputStream.withStream {
        file("tmp/$filename").bytes = it.bytes
    }
}

task dlDiscordRPC {
    println("Downloading discord-rpc v$discord_rpc_version...")
    ["win", "linux", "osx"].forEach {
        downloadOne("https://github.com/discordapp/discord-rpc/releases/download/v$discord_rpc_version/discord-rpc-${it}.zip", "discord-rpc-${it}.zip")
    }
}

task expandDiscordRPC(type: Copy, dependsOn: dlDiscordRPC) {
    println("Expanding discord-rpc...")
    def outputDir = file("libsExt")
    delete outputDir

    def extensions = ["dll", "so", "dylib"]
    def map = [
            "win64-dynamic": "win32-x86-64",
            "win32-dynamic": "win32-x86",
            "linux-dynamic": "linux-x86-64",
            "osx-dynamic"  : "darwin"
    ]

    from fileTree("tmp").collect { zipTree(it) }
    into outputDir
    eachFile { FileCopyDetails fcp ->
        println("2 $fcp.relativePath")
        boolean accepted = false
        def split = fcp.name.split("\\.")
        if (split.any() && split.last() in extensions) for (entry in map) {
            println("3 $fcp.relativePath")
            if (fcp.relativePath.pathString.contains(entry.key)) {
                println("4 $fcp.relativePath")
                fcp.relativePath = new RelativePath(true, entry.value, fcp.name)
                println("5 $fcp.relativePath")
                accepted = true
                break
            }
        }
        if (!accepted) fcp.exclude()
    }
    includeEmptyDirs = false

    doLast {
        delete "tmp"
    }
}
