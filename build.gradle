group 'be.bluexin'
version "$version_number.$build_number"

buildscript {
    ext.kotlin_version = '1.2.0'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'maven'

sourceCompatibility = 1.8
//sourceCompatibility = 1.9

repositories {
    jcenter()
    mavenCentral()
}

configurations {
    shade
    compile.extendsFrom shade
    shadeInPlace
    compile.extendsFrom shadeInPlace
}

ext.discord_rpc_version = "2.0.1"

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:0.19.3"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:0.19.3"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-nio:0.19.3"
    shade "net.java.dev.jna:jna:4.5.0"
    shadeInPlace files("libs")
    shadeInPlace files("libsExt") {
        builtBy 'expandDiscordRPC'
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
kotlin {
    experimental {
        coroutines "enable"
    }
}

task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    from sourceSets.test.allSource
    classifier = 'sources'
}

artifacts {
    archives sourceJar
}

jar {
    for (dep in configurations.shade) {
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }
    for (dep in configurations.shadeInPlace) {
        from(dep)
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.2.1'
}

uploadArchives {
    if (System.getenv('REPO_PWD') != null) {
        repositories.mavenDeployer {
            repository(url: "http://maven.bluexin.be/repository/" + (((String) project.version).contains("SNAPSHOT") ? "snapshots" : "releases") + "/") {
                authentication(userName: "travis", password: System.getenv('REPO_PWD'))
            }
        }
    } /*else {
            repositories.mavenDeployer {
                repository(url: "file://" + (System.getenv("local_maven") != null ? System.getenv("local_maven") : project.buildDir.toString() + "/libs/mvn"))
            }
    }*/
}

task dlDiscordRPC {
    println("Downloading discord-rpc v$discord_rpc_version...")
    def map = new HashMap<String, String>()
    map.put("Accept", "application/octet-stream")
    def connection = new URL("https://github.com/discordapp/discord-rpc/releases/download/v$discord_rpc_version/discord-rpc-${discord_rpc_version}.zip").openConnection()
    file("tmp").mkdir()
    connection.inputStream.withStream {
        file("tmp/discord-rpc-dl.zip").bytes = it.bytes
    }
}

task expandDiscordRPC(type: Copy, dependsOn: dlDiscordRPC) {
    println("Expanding discord-rpc...")
    def zipFile = file("tmp/discord-rpc-dl.zip")
    def outputDir = "libsExt"
    delete outputDir

    def extensions = ["dll", "so"]
    def map = [
            "win64-dynamic": "win32-x86-64",
            "win32-dynamic": "win32-x86"
    ]

    from zipTree(zipFile)
    into outputDir
    eachFile { FileCopyDetails fcp ->
        boolean accepted = false
        def split = fcp.name.split("\\.")
        if (split.any() && split.last() in extensions) for (entry in map) {
            if (fcp.relativePath.pathString.contains(entry.key)) {
                fcp.relativePath = new RelativePath(true, entry.value, fcp.name)
                accepted = true
                break
            }
        }
        if (!accepted) fcp.exclude()
    }
    includeEmptyDirs = false

    doLast {
        delete "tmp"
    }
}
